import{j as a,k as u,l as f,m as h,n as y,o as w,p as d,r as b,s as v,t as S,u as E}from"./chunk-6HUQKW6B.js";import{$ as m,a as c,b as g,e as s,ea as C}from"./chunk-UAJ5BYCW.js";var F=class p{constructor(t){this.firebaseService=t}getClients(){return s(this,null,function*(){try{let t=this.firebaseService.getFirestore(),e=a(t,"clients"),r=f(e,y("name","asc")),i=yield d(r),o=[];return i.forEach(n=>{o.push(c({id:n.id},n.data()))}),o}catch(t){return console.error("Error fetching clients:",t),[]}})}createClient(t){return s(this,null,function*(){try{let e=this.firebaseService.getFirestore(),r=a(e,"clients");return(yield S(r,g(c({},t),{createdAt:new Date,updatedAt:new Date}))).id}catch(e){throw console.error("Error creating client:",e),e}})}updateClient(t,e){return s(this,null,function*(){try{let r=this.firebaseService.getFirestore(),i=u(r,"clients",t);yield b(i,g(c({},e),{updatedAt:new Date}))}catch(r){throw console.error("Error updating client:",r),r}})}deleteClient(t){return s(this,null,function*(){try{if(yield this.isClientAssociatedWithOpportunities(t))throw new Error("Cannot delete client that is associated with existing opportunities");let r=this.firebaseService.getFirestore(),i=u(r,"clients",t);yield v(i)}catch(e){throw console.error("Error deleting client:",e),e}})}getClientById(t){return s(this,null,function*(){try{let e=this.firebaseService.getFirestore(),r=u(e,"clients",t),i=yield w(r);return i.exists()?c({id:i.id},i.data()):null}catch(e){return console.error("Error fetching client by ID:",e),null}})}getClientsByCountry(t){return s(this,null,function*(){try{let e=this.firebaseService.getFirestore(),r=a(e,"clients"),i=f(r,h("country","==",t),y("name","asc")),o=yield d(i),n=[];return o.forEach(l=>{n.push(c({id:l.id},l.data()))}),n}catch(e){return console.error("Error fetching clients by country:",e),[]}})}getClientsByIndustry(t){return s(this,null,function*(){try{let e=this.firebaseService.getFirestore(),r=a(e,"clients"),i=f(r,h("industry","==",t),y("name","asc")),o=yield d(i),n=[];return o.forEach(l=>{n.push(c({id:l.id},l.data()))}),n}catch(e){return console.error("Error fetching clients by industry:",e),[]}})}isClientAssociatedWithOpportunities(t){return s(this,null,function*(){try{let e=this.firebaseService.getFirestore(),r=a(e,"opportunities"),i=f(r,h("clientId","==",t));return!(yield d(i)).empty}catch(e){return console.error("Error checking client associations:",e),!1}})}static \u0275fac=function(e){return new(e||p)(C(E))};static \u0275prov=m({token:p,factory:p.\u0275fac,providedIn:"root"})};export{F as a};
