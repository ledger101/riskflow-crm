import{f as c,g as a,h as f,i as g,j as y,k as m,l as d,n as v,o as w,p as b,q as D}from"./chunk-JRVZ5TRL.js";import{$ as h,a as n,b as l,e as i,ea as S}from"./chunk-UAJ5BYCW.js";var F=class u{constructor(o){this.firebaseService=o}getSolutions(){return i(this,null,function*(){try{let o=this.firebaseService.getFirestore(),t=c(o,"solutions"),e=f(t,y("name","asc")),r=yield d(e),s=[];return r.forEach(p=>{s.push(n({id:p.id},p.data()))}),s}catch(o){return console.error("Error fetching solutions:",o),[]}})}createSolution(o){return i(this,null,function*(){try{let t=this.firebaseService.getFirestore(),e=c(t,"solutions"),r=l(n({},o),{createdAt:new Date,updatedAt:new Date,isActive:o.isActive!==!1});return(yield b(e,r)).id}catch(t){throw console.error("Error creating solution:",t),t}})}updateSolution(o,t){return i(this,null,function*(){try{let e=this.firebaseService.getFirestore(),r=a(e,"solutions",o),s=l(n({},t),{updatedAt:new Date});yield v(r,s)}catch(e){throw console.error("Error updating solution:",e),e}})}deleteSolution(o){return i(this,null,function*(){try{if(yield this.isSolutionAssociatedWithOpportunities(o))throw new Error("Cannot delete solution that is associated with existing opportunities");let e=this.firebaseService.getFirestore(),r=a(e,"solutions",o);yield w(r)}catch(t){throw console.error("Error deleting solution:",t),t}})}getSolutionById(o){return i(this,null,function*(){try{let t=this.firebaseService.getFirestore(),e=a(t,"solutions",o),r=yield m(e);return r.exists()?n({id:r.id},r.data()):null}catch(t){return console.error("Error fetching solution by ID:",t),null}})}isSolutionAssociatedWithOpportunities(o){return i(this,null,function*(){try{let t=this.firebaseService.getFirestore(),e=c(t,"opportunities"),r=f(e,g("solutionId","==",o));return!(yield d(r)).empty}catch(t){return console.error("Error checking solution associations:",t),!1}})}static \u0275fac=function(t){return new(t||u)(S(D))};static \u0275prov=h({token:u,factory:u.\u0275fac,providedIn:"root"})};export{F as a};
